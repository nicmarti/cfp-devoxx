# Home page
GET           /favicon.ico                                                      controllers.Assets.at(path="/public/images", file="favicon.ico")
GET           /                                                                 controllers.Application.index
GET           /home                                                             controllers.Application.home
GET           /homeVisitor                                                      controllers.Application.homeVisitor

# Used for Ops-Genie
GET           /status                                                           controllers.Status.index()

GET           /logout                                                           controllers.Authentication.logout
POST          /login                                                            controllers.Authentication.login(visitor:Boolean ?=false)

GET           /signup                                                           controllers.Authentication.prepareSignup(visitor:Boolean ?=false)
GET           /signup/github                                                    controllers.Authentication.createFromGithub(visitor:Boolean)
GET           /login/github                                                     controllers.Authentication.githubLogin(visitor:Boolean ?=false)
POST          /github/callback                                                  controllers.Authentication.callbackGithub(visitor:Boolean)
GET           /github/callback                                                  controllers.Authentication.callbackGithub(visitor:Boolean)

GET           /signup/linkedin                                                  controllers.Authentication.createFromLinkedin
GET           /login/linkedin                                                   controllers.Authentication.linkedinLogin(visitor:Boolean ?=false)
POST          /authenticate/linkedin                                            controllers.Authentication.callbackLinkedin
GET           /authenticate/linkedin                                            controllers.Authentication.callbackLinkedin

GET           /access_token                                                     controllers.Authentication.showAccessToken

POST          /newspeaker                                                       controllers.Authentication.saveNewSpeaker
POST          /newvisitor                                                       controllers.Authentication.saveNewVisitor
GET           /newspeaker/validateMail                                          controllers.Authentication.validateYourEmailForSpeaker(t:String,a:String)
GET           /visitors/validateMail                                            controllers.Authentication.validateYourEmailForVisitor(t:String,a:String)
POST          /newspeaker/validImported                                         controllers.Authentication.validateImportedSpeaker
POST          /visitors/validImported                                           controllers.Authentication.validateImportedVisitor


# Turn a user to an admin if and only if there is no other ADMIN on your system (or if you deleted all admins)
GET           /admin/bootstrapAdminUser                                         controllers.Backoffice.bootstrapAdminUser(uuid:String)
GET           /admin/clearCaches                                                controllers.Backoffice.clearCaches()


GET           /cfp/home                                                         controllers.CallForPaper.homeForSpeaker
GET           /cfp/profile                                                      controllers.CallForPaper.editProfile
POST          /cfp/profile                                                      controllers.CallForPaper.saveProfile
GET           /cfp/newSpeakerForExistingWebuser                                 controllers.CallForPaper.newSpeakerForExistingWebuser()

# proposal
GET           /cfp/proposal/new                                                 controllers.CallForPaper.newProposal()
POST          /cfp/proposal/preview                                             controllers.CallForPaper.previewProposal()
POST          /cfp/proposal/save                                                controllers.CallForPaper.saveProposal()

GET           /cfp/proposal/edit/:proposalId                                    controllers.CallForPaper.editProposal(proposalId:String)
GET           /cfp/proposal/edit/:proposalId/speakers                           controllers.CallForPaper.editOtherSpeakers(proposalId:String)
POST          /cfp/proposal/save/:proposalId/speakers                           controllers.CallForPaper.saveOtherSpeakers(proposalId:String)
GET           /cfp/proposal/delete/:proposalId                                  controllers.CallForPaper.deleteProposal(proposalId:String)
GET           /cfp/proposal/undelete/:proposalId                                controllers.CallForPaper.undeleteProposal(proposalId:String)
GET           /cfp/proposal/submit/:proposalId                                  controllers.CallForPaper.submitProposal(proposalId:String)
GET           /cfp/comment/:proposalId                                          controllers.CallForPaper.showCommentForProposal(proposalId:String)
POST          /cfp/comment/:proposalId                                          controllers.CallForPaper.sendMessageToCommitte(proposalId:String)

# Password
GET           /forget                                                           controllers.Authentication.forgetPassword
POST          /forget/validate                                                  controllers.Authentication.doForgetPassword()
GET           /resetpassword                                                    controllers.Authentication.resetPassword(t:String, a:String)

# OAuth2 google
GET           /signup/google                                                    controllers.Authentication.createFromGoogle
GET           /login/google                                                     controllers.Authentication.googleLogin(visitor:Boolean ?=false)
GET           /googleoauth2callback                                             controllers.Authentication.callbackGoogle
POST          /googleoauth2callback                                             controllers.Authentication.callbackGoogle

GET           /bug                                                              controllers.Application.bugReport
POST          /bug/new                                                          controllers.Application.submitIssue()

# CFP Admin
GET           /cfpadmin                                                         controllers.CFPAdmin.index(page:Int ?= 0, sort:Option[String] ?=None, ascdesc:Option[String] ?=None, track:Option[String] ?=None)
GET           /cfpadmin/proposal/:proposalId                                    controllers.CFPAdmin.openForReview(proposalId:String)
GET           /cfpadmin/proposal/:proposalId/history                             controllers.CFPAdmin.history(proposalId:String)
POST          /cfpadmin/proposal/:proposalId/msgToSpeaker                       controllers.CFPAdmin.sendMessageToSpeaker(proposalId:String)
POST          /cfpadmin/proposal/:proposalId/postInternal                       controllers.CFPAdmin.postInternalMessage(proposalId:String)
GET           /cfpadmin/proposal/:proposalId/vote                               controllers.CFPAdmin.voteForProposal(proposalId:String)
GET           /cfpadmin/proposal/:proposalId/clearVote                          controllers.CFPAdmin.clearVoteForProposal(proposalId:String)
GET           /cfpadmin/proposal/:proposalId/score                              controllers.CFPAdmin.showVotesForProposal(proposalId:String)
GET           /cfpadmin/leaderboard                                             controllers.CFPAdmin.leaderBoard
GET           /cfpadmin/leaderboard/reviewerStats                               controllers.CFPAdmin.allReviewersAndStats
GET           /cfpadmin/leaderboard/compute                                     controllers.CFPAdmin.doComputeLeaderBoard
GET           /cfpadmin/myvotes                                                 controllers.CFPAdmin.allMyVotes(talkType:String ?="conf")
GET           /cfpadmin/advancedsearch                                          controllers.CFPAdmin.advancedSearch(q:Option[String] ?=None,p:Option[Int] ?=None)
GET           /cfpadmin/allvotes/:confType                                      controllers.CFPAdmin.allVotes(confType:String, track:Option[String])
GET           /cfpadmin/allvotesJson                                            controllers.CFPAdmin.allVotesJson()
GET           /cfpadmin/recompute/allvotes                                      controllers.CFPAdmin.doComputeVotesTotal()
GET           /cfpadmin/allSponsorTalks                                         controllers.CFPAdmin.allSponsorTalks
GET           /cfpadmin/speaker/:uuidSpeaker                                    controllers.CFPAdmin.showSpeakerAndTalks(uuidSpeaker:String)
GET           /cfpadmin/sponsorTalk/remove/:proposalId                          controllers.CFPAdmin.removeSponsorTalkFlag(proposalId:String)
GET           /cfpadmin/proposals/byType/:confType                              controllers.CFPAdmin.allProposalsByType(confType:String)
GET           /cfpadmin/proposals/byTrack/:track                                controllers.CFPAdmin.allProposalsByTrack(track:String)
GET           /cfpadmin/compareReviewer                                         controllers.CFPAdmin.showProposalsNotReviewedCompareTo(maybeReviewer:Option[String])
GET           /cfpadmin/allWebusers                                             controllers.CFPAdmin.allWebusers()
GET           /cfpadmin/allSpeakers                                             controllers.CFPAdmin.allSpeakers()
GET           /cfpadmin/allSpeakers/approvedTalks                               controllers.CFPAdmin.allSpeakersWithApprovedTalks()
GET           /cfpadmin/allSpeakers/approvedTalks/byCompany                     controllers.CFPAdmin.allApprovedSpeakersByCompany()
GET           /cfpadmin/allSpeakers/acceptedTalks/forgetToAccept                controllers.CFPAdmin.allSpeakersThatForgetToAccept()
GET           /cfpadmin/allSpeakers/acceptedTalks/withBadge                     controllers.CFPAdmin.allSpeakersWithAcceptedTalksAndBadge()
GET           /cfpadmin/allSpeakers/acceptedTalks/all                           controllers.CFPAdmin.allSpeakersWithAcceptedTalks()
GET           /cfpadmin/allSpeakers/acceptedTalks/export                        controllers.CFPAdmin.allSpeakersWithAcceptedTalksForExport()
GET           /cfpadmin/allSpeakers/invited                                     controllers.InviteController.allInvitations()
GET           /cfpadmin/allCFPWebusers                                          controllers.CFPAdmin.allCFPWebusers()
POST          /cfpadmin/cfpWebusers/trackLeaders                                controllers.CFPAdmin.updateTrackLeaders()
GET           /cfpadmin/proposals/withNoVotes                                   controllers.CFPAdmin.showProposalsWithNoVotes()


GET           /cfpadmin/setPreferredDay                                         controllers.CFPAdmin.setPreferredDay(proposalId:String, day:String)
GET           /cfpadmin/resetPreferredDay                                       controllers.CFPAdmin.resetPreferredDay(proposalId:String)

GET           /cfpadmin/newOrEditSpeaker                                        controllers.CFPAdmin.newOrEditSpeaker(speakerUUID:Option[String])
POST          /cfpadmin/saveNewSpeaker                                          controllers.CFPAdmin.saveNewSpeaker()

GET           /admin                                                            controllers.Backoffice.homeBackoffice()
GET           /admin/webusers/switch                                            controllers.Backoffice.switchCFPAdmin(uuid:String)
GET           /admin/proposals/all                                              controllers.Backoffice.allProposals(proposalId:Option[String] ?=None)
GET           /admin/proposals/declined                                         controllers.Backoffice.showAllDeclined()
GET           /admin/proposals/changeState/:proposalId                          controllers.Backoffice.changeProposalState(proposalId:String,state:String)

POST          /admin/deleteSpeaker/:speakerUUIDToDelete                         controllers.Backoffice.deleteSpeaker(speakerUUIDToDelete:String)
GET           /admin/cleanUpVotesIfUserWasDeleted                               controllers.Backoffice.cleanUpVotesIfUserWasDeleted
GET           /admin/deleteAllVotes                                             controllers.Backoffice.deleteVotesForPropal(proposalId:String)
GET           /admin/submittedByDate                                            controllers.Backoffice.submittedByDate()

# Authenticate and admin as a regular user
GET           /admin/authenticateAs/:uuid                                       controllers.Backoffice.authenticateAs(uuid:String)
GET           /admin/authenticateAndCreate/:uuid                                controllers.Backoffice.authenticateAndCreateTalk(uuid:String)

GET           /admin/elastic/reset                                              controllers.Backoffice.doResetAndConfigureElasticSearch()
GET           /admin/elastic/index                                              controllers.Backoffice.doIndexElasticSearch()
GET           /admin/sanitycheck                                                controllers.Backoffice.sanityCheckSchedule()
GET           /admin/sanitycheck/fix                                            controllers.Backoffice.fixToAccepted(slotId:String, proposalId:String, talkType:String)
GET           /admin/sanitycheck/proposals                                      controllers.Backoffice.sanityCheckProposals()

# Send a reminder
GET           /admin/reminder/trigger                                           controllers.Backoffice.sendDraftReminder()

# ApproveOrRefuse controller
GET           /ar/preaccept/:proposalId                                         controllers.ApproveOrRefuse.doApprove(proposalId:String)
GET           /ar/refuse/:proposalId                                            controllers.ApproveOrRefuse.doRefuse(proposalId:String)
GET           /ar/cancelPreaccept/:proposalId                                   controllers.ApproveOrRefuse.cancelApprove(proposalId:String)
GET           /ar/cancelPrerefuse/:proposalId                                   controllers.ApproveOrRefuse.cancelRefuse(proposalId:String)

GET           /ar/allApproved/:talkType                                         controllers.ApproveOrRefuse.allApprovedByTalkType(talkType:String)
GET           /ar/allRefused/:talkType                                          controllers.ApproveOrRefuse.allRefusedByTalkType(talkType:String)
GET           /ar/notifyApprove/:talkType                                       controllers.ApproveOrRefuse.notifyApprove(talkType:String, proposalId:String)
GET           /ar/notifyRefuse/:talkType                                        controllers.ApproveOrRefuse.notifyRefused(talkType:String, proposalId:String)
GET           /ar/showAcceptTerms                                               controllers.ApproveOrRefuse.showAcceptTerms()
GET           /ar/accept                                                        controllers.ApproveOrRefuse.acceptTermsAndConditions()
GET           /ar/acceptOrRefuseTalks                                           controllers.ApproveOrRefuse.showAcceptOrRefuseTalks()
POST          /ar/acceptOrRefuseTalks                                           controllers.ApproveOrRefuse.doAcceptOrRefuseTalk()

# For Fun, it works only if you have Elastic Search
GET           /cloudtags                                                        controllers.CallForPaper.cloudTags()

# Content Publisher
# If you plan to use the CFP for your program, you can adapt the URLs below
# Please, do not try to propose a configurable system here, as each Conference has its own URLs
# Keep the .html in each URL if you want to save your program (with wget for instance)
# Each year I do a backup with wget wget --no-clobber --convert-links -r -p -E -e robots=off http://localhost:9000/2014

GET           /2016/speakers.html                                               controllers.Publisher.showAllSpeakers()
GET           /2016/speaker/:cleanName                                          controllers.Publisher.showSpeakerByName(cleanName:String)
GET           /2016/talks/:talkType                                             controllers.Publisher.showByTalkType(talkType:String)
GET           /2016/talk/:proposalId                                            controllers.Publisher.showDetailsForProposal(proposalId:String, proposalTitle:String="")
GET           /2016/talk/:proposalId/:proposalTitle                             controllers.Publisher.showDetailsForProposal(proposalId:String, proposalTitle:String)
GET           /2016/index.html                                                  controllers.Publisher.homePublisher()
GET           /2016/agenda/:confType/:day                                       controllers.Publisher.showAgendaByConfType(confType:String, slotId:Option[String], day:String)
GET           /2016/byday/:day                                                  controllers.Publisher.showByDay(day:String)
GET           /2016/search                                                      controllers.Publisher.search(q:Option[String] ?=None,p:Option[Int] ?=None)
# Favorites
GET           /favorites                                                        controllers.Favorites.home
POST          /favorites/like                                                   controllers.Favorites.likeIt(proposalId:Long)
POST          /favorites/unlike                                                 controllers.Favorites.unlikeIt(proposalId:Long)
GET           /newvisitor/welcome                                               controllers.Favorites.welcomeVisitor()

# REST API
GET           /api                                                              controllers.RestAPI.index()
GET           /api/conferences/                                                 controllers.RestAPI.redirectToConferences()
GET           /api/conferences                                                  controllers.RestAPI.showAllConferences()
GET           /api/conferences/:eventCode                                       controllers.RestAPI.showConference(eventCode:String)
GET           /api/conferences/:eventCode/speakers/                             controllers.RestAPI.redirectToSpeakers(eventCode:String)
GET           /api/conferences/:eventCode/speakers                              controllers.RestAPI.showSpeakers(eventCode:String)
GET           /api/conferences/:eventCode/speakers/:uuid                        controllers.RestAPI.showSpeaker(eventCode:String,uuid:String)
GET           /api/conferences/:eventCode/rooms/:room/:day                      controllers.RestAPI.showScheduleForRoom(eventCode: String, room:String, day: String)
GET           /api/conferences/:eventCode/rooms/                                controllers.RestAPI.showRooms(eventCode:String)
GET           /api/conferences/:eventCode/rooms                                 controllers.RestAPI.showRooms(eventCode:String)
GET           /api/conferences/:eventCode/talks/:id                             controllers.RestAPI.showTalk(eventCode:String,id:String)
GET           /api/conferences/:eventCode/talks/                                controllers.RestAPI.redirectToTalks(eventCode:String)
GET           /api/conferences/:eventCode/talks                                 controllers.RestAPI.showApprovedTalks(eventCode:String)
GET           /api/conferences/:eventCode/schedules/                            controllers.RestAPI.showAllSchedules(eventCode:String)
GET           /api/conferences/:eventCode/schedules                             controllers.RestAPI.showAllSchedules(eventCode:String)
GET           /api/conferences/:eventCode/schedules/:day/                       controllers.RestAPI.showScheduleFor(eventCode:String, day:String)
GET           /api/conferences/:eventCode/schedules/:day                        controllers.RestAPI.showScheduleFor(eventCode:String, day:String)
GET           /api/conferences/:eventCode/proposalTypes                         controllers.RestAPI.showProposalTypes(eventCode:String)
GET           /api/conferences/:eventCode/tracks                                controllers.RestAPI.showTracks(eventCode:String)
GET           /api/helpers/tracks/messagekeys                                   controllers.RestAPI.showTracksList

GET           /api/profile/:docName                                             controllers.RestAPI.profile(docName:String)

# API for AngularJS
GET           /schedulling/slots                                                controllers.SchedullingController.slots(confType:String)
GET           /schedulling/approvedTalks                                        controllers.SchedullingController.approvedTalks(confType:String)
GET           /schedulling/scheduledConfigurations                              controllers.SchedullingController.allScheduledConfiguration()
GET           /schedulling/loadScheduledConfiguration                           controllers.SchedullingController.loadScheduledConfiguration(id:String)
POST          /schedulling/slots                                                controllers.SchedullingController.saveSlots(confType:String)
DELETE        /schedulling/deletescheduledConfigurations                        controllers.SchedullingController.deleteScheduleConfiguration(id:String)
POST          /schedulling/publish                                              controllers.SchedullingController.publishScheduleConfiguration()
GET           /schedulling/published                                            controllers.SchedullingController.getPublishedSchedule(confType:String, day:Option[String])

# Wishlist
GET           /cfpadmin/wishlist/home                                           controllers.Wishlist.homeWishlist()
GET           /cfpadmin/wishlist/new                                            controllers.Wishlist.newRequestToTalk()
POST          /cfpadmin/wishlist/saveNew                                        controllers.Wishlist.saveNewRequestToTalk()

GET           /cfpadmin/wishlist/edit/:requestId                                controllers.Wishlist.edit(requestId:String)
POST          /cfpadmin/wishlist/saveedit                                       controllers.Wishlist.saveEdit()

GET           /cfpadmin/wishlist/delete/:requestId                              controllers.Wishlist.deleteRequest(requestId:String)
GET           /cfpadmin/wishlist/approve/:requestId                             controllers.Wishlist.speakerApproveRequest(requestId:String)
GET           /cfpadmin/wishlist/decline/:requestId                             controllers.Wishlist.speakerDeclineRequest(requestId:String)

GET           /cfpadmin/wishlist/speaker/setPersonInCharge/:requestId           controllers.Wishlist.setPersonInCharge(requestId:String, userId:String)
GET           /cfpadmin/wishlist/speaker/unsetPersonInCharge/:requestId         controllers.Wishlist.unsetPersonInCharge(requestId:String)
GET           /cfpadmin/wishlist/speaker/selectPersonInCharge/:requestId        controllers.Wishlist.selectPersonInCharge(requestId:String, speakerName:String)

# Invitation system
GET           /cfpadmin/invitations                                             controllers.InviteController.allInvitations()
GET           /cfpadmin/invitations/invite                                      controllers.InviteController.invite(speakerUUID:String)
GET           /cfpadmin/invitations/cancel                                      controllers.InviteController.cancelInvite(speakerUUID)

# Attic - Used to archive talks from previous year. If you use it before your conference, it deletes everything...
# Please note that I removed the following links from the ADMIN Panel cause it is really something you do onle once a year.
GET           /cfpadmin/attic/home                                              controllers.Attic.atticHome()
POST          /cfpadmin/attic/pruneDraft                                        controllers.Attic.prune()
POST          /cfpadmin/attic/doArchive                                         controllers.Attic.doArchive()
POST          /cfpadmin/attic/deleteInvitedSpeakers                             controllers.Attic.deleteInvitedSpeakers()
POST          /cfpadmin/attic/resetNotified                                     controllers.Attic.resetNotified()
POST          /cfpadmin/attic/resetEvents                                       controllers.Attic.resetEvents()

# Golden ticket admin
GET           /admin/goldenTickets                                              controllers.GoldenTicketAdminController.showAll()
GET           /admin/goldenTickets/newTicket                                    controllers.GoldenTicketAdminController.newGoldenTicket()
POST          /admin/goldenTickets/newTicket                                    controllers.GoldenTicketAdminController.saveGoldenTicket()
GET           /admin/goldenTickets/votes                                        controllers.GoldenTicketAdminController.showGoldenTicketVotes()
GET           /admin/goldenTickets/stats                                        controllers.GoldenTicketAdminController.showStats()
POST          /admin/goldenTickets/:id/unactivate                               controllers.GoldenTicketAdminController.unactivateGoldenTicket(id:String)
POST          /admin/goldenTickets/:goldenTicketId/sendEmail                    controllers.GoldenTicketAdminController.sendEmail(goldenTicketId:String)

# Golden ticket webuser side
GET           /cfp/goldenticket/proposals                                        controllers.GoldenTicketController.showAllProposals(page:Int ?= 0, sort:Option[String] ?=None, ascdesc:Option[String] ?=None, track:Option[String] ?=None)
GET           /cfp/goldenticket/myvotes                                          controllers.GoldenTicketController.allMyGoldenTicketVotes(talkType:String ?="conf")
GET           /cfp/goldenticket                                                  controllers.GoldenTicketController.authenticate()
POST          /cfp/goldenticket                                                  controllers.GoldenTicketController.doAuthenticate()

GET           /cfp/goldenticket/proposals/:proposalId                            controllers.GoldenTicketController.openForReview(proposalId:String)
GET           /cfp/goldenticket/proposals/:proposalId/vote                       controllers.GoldenTicketController.voteForProposal(proposalId:String)
GET           /cfp/goldenticket/proposals/:proposalId/clearVote                  controllers.GoldenTicketController.clearVoteForProposal(proposalId:String)
GET           /cfp/goldenticket/proposals/:proposalId/showvotes                  controllers.GoldenTicketController.showVotesForProposal(proposalId:String)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                     controllers.Assets.at(path="/public", file)
